import { db } from '@/services/firebase.js'
import { doc, getDoc, runTransaction, serverTimestamp, Timestamp } from 'firebase/firestore'

const addMonths = (ms, months) => { const d = new Date(ms); const day = d.getDate(); d.setMonth(d.getMonth() + months); if (d.getDate() !== day) { d.setDate(0) } return d.getTime() }
const planMonths = plan => plan === 'annual' ? 12 : plan === 'semiannual' ? 6 : 1

export const useInviteCodes = () => {
  const getCode = async (code) => { const ref = doc(db,'inviteCodes', code.toUpperCase()); const snap = await getDoc(ref); if (!snap.exists()) throw new Error('not_found'); const data = snap.data(); const now = Date.now(); const exp1 = data.expiresAt?.toMillis ? data.expiresAt.toMillis() : data.expiresAt; const exp2 = data.graceExpiresAt?.toMillis ? data.graceExpiresAt.toMillis() : data.graceExpiresAt; if (data.status !== 'unused') throw new Error('used'); if (now >= Math.min(exp1 || 0, exp2 || 0)) throw new Error('expired'); return { id: snap.id, ...data } }
  const applyCode = async (code, uid) => { const codeId = code.trim().toUpperCase(); if (!codeId) throw new Error('invalid'); const codeRef = doc(db,'inviteCodes', codeId); const userRef = doc(db,'users', uid); const result = await runTransaction(db, async (trx) => { const [codeSnap, userSnap] = await Promise.all([trx.get(codeRef), trx.get(userRef)]); if (!userSnap.exists()) throw new Error('user'); if (!codeSnap.exists()) throw new Error('not_found'); const cd = codeSnap.data(); const now = Date.now(); const exp1 = cd.expiresAt?.toMillis ? cd.expiresAt.toMillis() : cd.expiresAt; const exp2 = cd.graceExpiresAt?.toMillis ? cd.graceExpiresAt.toMillis() : cd.graceExpiresAt; if (cd.status !== 'unused') throw new Error('used'); if (now >= Math.min(exp1 || 0, exp2 || 0)) throw new Error('expired'); const userData = userSnap.data(); const curExpMs = userData.planExpiresAt?.toMillis ? userData.planExpiresAt.toMillis() : userData.planExpiresAt; const base = (curExpMs && curExpMs > now) ? curExpMs : now; const months = planMonths(cd.plan || 'monthly'); const newExpMs = addMonths(base, months); const newExp = Timestamp.fromMillis(newExpMs); trx.update(userRef, { isActive: true, planExpiresAt: newExp, lastActiveAt: serverTimestamp() }); trx.update(codeRef, { status: 'used', usedBy: uid, usedAt: serverTimestamp() }); return newExp }); return result }
  return { getCode, applyCode }
}

